From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: "georgijpronuk@gmail.com" <georgijpronuk@gmail.com>
Date: Mon, 10 Jul 2023 15:58:50 +0300
Subject: [PATCH] Custom attributes support


diff --git a/src/main/java/net/minecraft/world/entity/EntityLiving.java b/src/main/java/net/minecraft/world/entity/EntityLiving.java
index 158388410ea14b2df95635914844952bd52b8f87..dbce3e5d76dc567cad2d2a0ff9b5a4df56d8a6ae 100644
--- a/src/main/java/net/minecraft/world/entity/EntityLiving.java
+++ b/src/main/java/net/minecraft/world/entity/EntityLiving.java
@@ -263,6 +263,7 @@ public abstract class EntityLiving extends Entity {
         this.by = Optional.empty();
         this.attributeMap = new AttributeMapBase(AttributeDefaults.a(entitytypes));
         this.initAttributes(); // Purpur
+        this.customAttributes();
         this.craftAttributes = new CraftAttributeMap(attributeMap); // CraftBukkit
         // CraftBukkit - setHealth(getMaxHealth()) inlined and simplified to skip the instanceof check for EntityPlayer, as getBukkitEntity() is not initialized in constructor
         this.datawatcher.set(EntityLiving.HEALTH, (float) this.getAttributeInstance(GenericAttributes.MAX_HEALTH).getValue());
@@ -282,6 +283,15 @@ public abstract class EntityLiving extends Entity {
 
     protected void initAttributes() {} // Purpur
 
+    protected void customAttributes() {
+        this.world.purpurConfig.attributes.row(this.getEntityType()).forEach((key, value) -> {
+            if (!this.attributeMap.b(key)) {
+                this.attributeMap.registerAttribute(key);
+            }
+            this.attributeMap.a(key).setValue(value);
+        });
+    }
+
     public BehaviorController<?> getBehaviorController() {
         return this.bg;
     }
diff --git a/src/main/java/net/pl3x/purpur/PurpurWorldConfig.java b/src/main/java/net/pl3x/purpur/PurpurWorldConfig.java
index 5f1bfe41b9f7f24b86e72ea3b57acb3a7da95ad3..a5085d7316c3ba0c1ad9d0a94e76a08e4354b540 100644
--- a/src/main/java/net/pl3x/purpur/PurpurWorldConfig.java
+++ b/src/main/java/net/pl3x/purpur/PurpurWorldConfig.java
@@ -1,8 +1,12 @@
 package net.pl3x.purpur;
 
 import com.destroystokyo.paper.PaperConfig;
+import com.google.common.collect.HashBasedTable;
+import com.google.common.collect.Table;
 import net.minecraft.core.IRegistry;
 import net.minecraft.world.EnumDifficulty;
+import net.minecraft.world.entity.EntityTypes;
+import net.minecraft.world.entity.ai.attributes.AttributeBase;
 import net.minecraft.world.item.EnumColor;
 import net.minecraft.world.level.Explosion;
 import net.minecraft.world.level.block.Block;
@@ -280,6 +284,26 @@ public class PurpurWorldConfig {
         infinityWorksWithTippedArrows = getBoolean("gameplay-mechanics.infinity-bow.tipped-arrows", infinityWorksWithTippedArrows);
     }
 
+    public Table<EntityTypes<?>, AttributeBase, Double> attributes = HashBasedTable.create();
+
+
+    private void attributes() {
+        this.attributes.clear();
+        ConfigurationSection mobs = this.getConfigurationSection("mobs");
+        for (String key : mobs.getKeys(false)) {
+            IRegistry.ENTITY_TYPE.getOptional(MinecraftKey.a(key)).ifPresent(type -> {
+                Map<AttributeBase, Double> map = this.attributes.row(type);
+                ConfigurationSection attributes = mobs.getConfigurationSection(key + ".custom_attributes");
+                if (attributes == null) {
+                    return;
+                }
+                for (String attribute : attributes.getKeys(false)) {
+                    IRegistry.ATTRIBUTE.getOptional(MinecraftKey.a("generic." + attribute)).ifPresent(base -> map.put(base, attributes.getDouble(attribute)));
+                }
+            });
+        }
+    }
+
     public int dragonFireballDespawnRate = -1;
     public int eggDespawnRate = -1;
     public int enderPearlDespawnRate = -1;
